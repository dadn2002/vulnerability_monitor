import streamlit as st
import streamlit.components.v1 as components
import os
import re
import glob
import pandas as pd  # Import pandas for handling dataframes

def get_graph_name_from_path(path: str, graph_type: str) -> str:
    basename = os.path.basename(path)
    prefix = f'{graph_type}_'
    suffix = '_process_network_graph.html'
    
    if basename.startswith(prefix) and basename.endswith(suffix):
        return basename[len(prefix):-len(suffix)]
    return ''

def get_data_file_path(graph_name: str, data_paths: list) -> str:
    expected_filename = f"data_of_{graph_name.replace('.exe', '').lower()}_process_network_graph.txt"
    for path in data_paths:
        if os.path.basename(path) == expected_filename:
            return path
    return None

#------------------------------Variables part---------------------------#
folder_path_graphs = os.path.join(os.path.dirname(__file__), 'graphs')
folder_path_bigboy = os.path.join(os.path.dirname(__file__), 'the_big_one')
pattern = os.path.join(folder_path_graphs, '*_process_network_graph.html')
html_paths = glob.glob(pattern)

folder_path1 = os.path.join(os.path.dirname(__file__), 'data_of_graphs')
pattern2 = os.path.join(folder_path1, '*_process_network_graph.txt')
data_paths = glob.glob(pattern2)

# Define available graph types
graph_types = ["undirected", "directed"]
default_graph_type = "undirected"

selected_path = None

# Initialize session state
if 'selected_graph' not in st.session_state:
    st.session_state.selected_graph = "dllhost"
if 'selected_graph_type' not in st.session_state:
    st.session_state.selected_graph_type = default_graph_type

#----------------------------Text part of html-------------------------#
st.title('Vulnerability Monitor')
st.markdown("Acompanhe este projeto em: https://github.com/dadn2002/vulnerability_monitor")  

current_url         = st.experimental_get_query_params()
secret_path1        = "secreta"
secret_path2        = "secretb"
secret_graph_path1  = os.path.join(folder_path_graphs, 'directory_structure_no_folders.html') 
secret_graph_path2  = os.path.join(folder_path_bigboy, 'global_redacted_pyvis_process_network_graph.html') 

if secret_path1 in current_url:
    #st.write(f"Displaying secret graph: {secret_graph_path1}")
    selected_path = secret_graph_path1
    st.write(f"Checking if file exists: {os.path.isfile(secret_graph_path1)}")  

    if os.path.isfile(selected_path):
        with open(selected_path, 'r') as file:
            html_content = file.read()
        components.html(html_content, height=700, scrolling=True)

elif secret_path2 in current_url:
    #st.write(f"Displaying secret graph: {secret_graph_path2}")
    selected_path = secret_graph_path2
    st.write(f"Checking if file exists: {os.path.isfile(secret_graph_path2)}") 

    if os.path.isfile(selected_path):
        with open(selected_path, 'r') as file:
            html_content = file.read()
        components.html(html_content, height=700, scrolling=True)

        # Find related data file
        data_file_path = get_data_file_path(get_graph_name_from_path(selected_path, 'directed'), data_paths)
        if data_file_path and os.path.isfile(data_file_path):
            st.write("Data associated with the graph:")
            # Load data into a DataFrame
            data_df = pd.read_csv(data_file_path)
            st.dataframe(data_df)
        else:
            st.write("No data file found for the selected graph.")
            st.write(f"{data_file_path}") 
    else:
        st.write("Graph file does not exist.")

else:
    # Create a selectbox for choosing the graph type
    default_index_type = graph_types.index(default_graph_type) if default_graph_type in graph_types else 0
    selected_graph_type = st.selectbox('Select a graph type to view:', graph_types, index=default_index_type, key='selected_graph_type')

    # Filter graph names based on the selected graph type
    graph_names = list(set(get_graph_name_from_path(path, selected_graph_type) for path in html_paths if selected_graph_type in path))
    graph_names = [name for name in graph_names if name]

    # If the current selected graph is not available in the new graph type, reset to default
    if st.session_state.selected_graph not in graph_names:
        st.session_state.selected_graph = "dllhost" if "dllhost" in graph_names else graph_names[0] if graph_names else None

    selected_graph = st.selectbox('Select a graph to view:', graph_names, index=graph_names.index(st.session_state.selected_graph) if st.session_state.selected_graph in graph_names else 0, key='selected_graph')

    if selected_graph:
        for path in html_paths:
            if get_graph_name_from_path(path, selected_graph_type) == selected_graph:
                selected_path = path
                break

    if selected_path:
        with open(selected_path, 'r') as file:
            html_content = file.read()
        components.html(html_content, height=700, scrolling=True)

        if selected_graph_type == 'directed':
            # Load and display data table
            data_file_path = get_data_file_path(selected_graph, data_paths)
            st.write(f"{selected_path}")
            st.write(f"{data_paths}") 
            
            if data_file_path and os.path.isfile(data_file_path):
                st.write("Data associated with the graph:")
                # Load data into a DataFrame
                data_df = pd.read_csv(data_file_path)
                st.dataframe(data_df)
            else:
                st.write("No data file found for the selected graph.")
                st.write(f"{selected_path}")
                st.write(f"{data_file_path}") 
