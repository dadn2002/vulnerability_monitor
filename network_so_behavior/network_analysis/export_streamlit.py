import streamlit as st
import streamlit.components.v1 as components
import os
import re
import glob
from urllib.parse import urlencode, urlparse, parse_qs

def get_graph_name_from_path(path: str, graph_type: str) -> str:
    basename = os.path.basename(path)
    prefix = f'{graph_type}_'
    suffix = '_process_network_graph.html'
    
    if basename.startswith(prefix) and basename.endswith(suffix):
        return basename[len(prefix):-len(suffix)]
    return ''

#------------------------------Variables part---------------------------#
folder_path = os.path.join(os.path.dirname(__file__), 'graphs')
pattern = os.path.join(folder_path, '*_process_network_graph.html')
html_paths = glob.glob(pattern)

# Define available graph types
graph_types = ["undirected", "directed"]
default_graph_type = "undirected"

# Initialize session state
if 'selected_graph' not in st.session_state:
    st.session_state.selected_graph = "dllhost"
if 'selected_graph_type' not in st.session_state:
    st.session_state.selected_graph_type = default_graph_type

#----------------------------Text part of html-------------------------#
st.title('Vulnerability Monitor')
st.markdown("Acompanhe este projeto em: https://github.com/dadn2002/vulnerability_monitor")

current_url = st.experimental_get_query_params()
secret_path = "secret"
folder_pathsecret_graph = os.path.join(os.path.dirname(__file__), 'presentation')
secret_graph_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'directory_structure_no_folders.html'))

if secret_path in current_url:
    st.write(f"Displaying secret graph: {secret_graph_path}")
    selected_path = secret_graph_path

else:
    # Create a selectbox for choosing the graph type
    default_index_type = graph_types.index(default_graph_type) if default_graph_type in graph_types else 0
    selected_graph_type = st.selectbox('Select a graph type to view:', graph_types, index=default_index_type, key='selected_graph_type')

    # Filter graph names based on the selected graph type
    graph_names = list(set(get_graph_name_from_path(path, selected_graph_type) for path in html_paths if selected_graph_type in path))
    graph_names = [name for name in graph_names if name]

    # If the current selected graph is not available in the new graph type, reset to default
    if st.session_state.selected_graph not in graph_names:
        st.session_state.selected_graph = "dllhost" if "dllhost" in graph_names else graph_names[0] if graph_names else None

    selected_graph = st.selectbox('Select a graph to view:', graph_names, index=graph_names.index(st.session_state.selected_graph) if st.session_state.selected_graph in graph_names else 0, key='selected_graph')

    if selected_graph:
        selected_path = None
        for path in html_paths:
            if get_graph_name_from_path(path, selected_graph_type) == selected_graph:
                selected_path = path
                break
        
if selected_path:
    if secret_path in current_url:
        st.write(f"Displaying structure secret graph! path: {selected_path}")
    else:
        st.write(f"Displaying {selected_graph_type} graph of process: {selected_graph} path: {selected_path}")

    with open(selected_path, 'r') as file:
        html_content = file.read()
    components.html(html_content, height=600)
