import matplotlib.pyplot as plt
import networkx as nx
import matplotlib.colors as mcolors
import random
import time
import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk

G_process_grouped = nx.Graph()
nodes_by_name = {}
old_modules_of_processes = []
colors = list(mcolors.CSS4_COLORS.keys())
colors.remove('white')      # Removing background color
colors.remove('lightgrey')  # Removing dll_nodes  color
random.shuffle(colors)
color_map = {}
color_index = 0

def update_plot(G, data, canvas):
    global old_modules_of_processes
    global nodes_by_name
    global color_map
    global color_index
    global colors

    if old_modules_of_processes == data:
        return
    for node in data:
        if '),' in node:
            separated_names = node.split('), ')
            process_name = separated_names[0].split(' (')[0]
            if '.exe' in process_name:
                process_name = process_name.replace('.exe', '')
            PID_number = separated_names[0].split(' (')[1]
            dll_name = separated_names[1].lower().split('.dll')[0]

            if process_name not in color_map:
                if color_index >= len(colors):
                    color_index = 0
                color_map[process_name] = colors[color_index]
                color_index += 1

            if not G.has_node(process_name):
                G.add_node(process_name, title=process_name, node_type='root_node', color=color_map[process_name])
                if process_name not in nodes_by_name:
                    nodes_by_name[process_name] = [PID_number]
                else:
                    nodes_by_name[process_name].append(PID_number)
            
            if not G.has_node(dll_name):
                G.add_node(dll_name, title=dll_name, node_type='dll_node')

            G.add_node(PID_number, title=PID_number, node_type='process_node', color=color_map[process_name])
            G.add_edge(process_name, PID_number, color=color_map[process_name])

            G.add_edge(PID_number, dll_name, color=color_map[process_name])

    plt.clf()
    pos = nx.kamada_kawai_layout(G)

    root_nodes    = [node for node in G.nodes if G.nodes[node].get('node_type') == 'root_node']
    process_nodes = [node for node in G.nodes if G.nodes[node].get('node_type') == 'process_node']
    dll_nodes     = [node for node in G.nodes if G.nodes[node].get('node_type') == 'dll_node']

    nx.draw_networkx_nodes(G, pos, nodelist=root_nodes, node_color=[G.nodes[node]['color'] for node in root_nodes], node_size=5000)
    nx.draw_networkx_nodes(G, pos, nodelist=process_nodes, node_color=[G.nodes[node]['color'] for node in process_nodes], node_size=2000)
    nx.draw_networkx_nodes(G, pos, nodelist=dll_nodes, node_color='lightgrey', node_size=1250)

    edges = [(u, v) for u, v in G.edges]
    edge_colors = [G[u][v]['color'] for u, v in G.edges]
    nx.draw_networkx_edges(G, pos, edgelist=edges, edge_color=edge_colors, width=1.5)

    nx.draw_networkx_labels(G, pos, font_size=8, font_weight='bold', font_color='black', horizontalalignment='center')

    plt.title('Process Network Graph')
    plt.tight_layout()
    canvas.draw()

    old_modules_of_processes = data.copy()

def update_dataset():
    # Formating the data got from ../extracting_data programs.
    modules_of_processes = []
    with open("../list_MODULES_imports.txt", "r") as file:
        for line in file:
            modules_of_processes.append(line.strip())
    print(f"Number of found edges: {len(modules_of_processes)}")
    return modules_of_processes

def main():
    root = tk.Tk()
    root.title('Process Network Graph')
    canvas = FigureCanvasTkAgg(plt.figure(figsize=(60, 40)), master=root)  # Figsize is set here
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

    def update_and_repeat():
        modules_of_processes = update_dataset()
        update_plot(G_process_grouped, modules_of_processes, canvas)
        root.after(10000, update_and_repeat)

    update_and_repeat()

    root.mainloop()

if __name__ == "__main__":
    main()
