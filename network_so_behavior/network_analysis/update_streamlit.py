from pyvis.network import Network
import matplotlib.colors as mcolors
import random
import networkx as nx
import os
import subprocess
import time

modules_of_processes = []
G_process_grouped = nx.Graph()
timer_for_update = 60

def reading_dataset(file_path):
    """Read dataset and populate modules_of_processes list."""
    print("[i] Reading dataset...")
    with open(file_path, "r") as file:
        modules_of_processes.extend(line.strip() for line in file)

def initializing_graph():
    """Initialize the graph from the dataset."""
    print("[i] Initializing nx graph...")
    colors = list(mcolors.CSS4_COLORS.keys())
    random.shuffle(colors)
    color_map = {}

    for node in modules_of_processes:
        if '),' in node:
            try:
                separated_names = node.split('), ')
                process_name = separated_names[0].split(' (')[0]
                PID_number = separated_names[0].split(' (')[1]
                dll_name = separated_names[1].lower().split('.dll')[0]

                if '.exe' in dll_name:
                    continue

                if process_name not in color_map:
                    color_map[process_name] = colors.pop()

                if not G_process_grouped.has_node(process_name):
                    G_process_grouped.add_node(process_name, title=process_name, node_type='root_node', color=color_map[process_name])

                if not G_process_grouped.has_node(dll_name):
                    G_process_grouped.add_node(dll_name, title=dll_name, node_type='dll_node')

                if not G_process_grouped.has_node(PID_number):
                    G_process_grouped.add_node(PID_number, title=PID_number, node_type='process_node', color=color_map[process_name])

                G_process_grouped.add_edge(process_name, PID_number, color=color_map[process_name])
                G_process_grouped.add_edge(PID_number, dll_name, color=color_map[process_name])
            
            except IndexError as e:
                print(f"[#] Error processing line: {node}")
                print(f"[#] Exception: {e}")
                continue  # Skip to the next line

    pos = nx.spring_layout(G_process_grouped)  # Use spring_layout or any other available layout function
    
    # Draw nodes and edges
    for node_type, color in [('root_node', 'color'), ('process_node', 'color'), ('dll_node', 'lightgrey')]:
        nodes = [node for node, data in G_process_grouped.nodes(data=True) if data.get('node_type') == node_type]
        node_colors = [G_process_grouped.nodes[node].get('color', color) for node in nodes]
        sizes = {'root_node': 5000, 'process_node': 2000, 'dll_node': 1250}
        nx.draw_networkx_nodes(G_process_grouped, pos, nodelist=nodes, node_color=node_colors, node_size=sizes[node_type])

    edge_colors = [G_process_grouped[u][v]['color'] for u, v in G_process_grouped.edges]
    nx.draw_networkx_edges(G_process_grouped, pos, edgelist=G_process_grouped.edges, edge_color=edge_colors, width=1.5)
    nx.draw_networkx_labels(G_process_grouped, pos, font_size=8, font_weight='bold', font_color='black')

    print(f"[+] Generated networkx graph")
    print(f"[i] Number of nodes: {len(G_process_grouped.nodes)}")
    print(f"[i] Number of edges: {len(G_process_grouped.edges)}")

def generate_pyvis_html(output_path, filter_by_process_root):
    """Generate Pyvis HTML visualization."""
    print("[i] Generating pyvis HTML...")
    
    def random_color():
        """Generate a vibrant random color in hex format."""
        return f'#{random.randint(0, 0xFFFFFF):06x}'

    def generate_node_color(root_color):
        """Generate a color for process nodes based on the root color."""
        r, g, b = [int(root_color[i:i+2], 16) for i in (1, 3, 5)]
        r = min(255, max(0, r + random.randint(-50, 50)))
        g = min(255, max(0, g + random.randint(-50, 50)))
        b = min(255, max(0, b + random.randint(-50, 50)))
        return f'#{r:02x}{g:02x}{b:02x}'

    pyvis_net = Network(height='1000px', width='100%', bgcolor='#222222', font_color='white')

    root_nodes = [node for node in G_process_grouped.nodes if G_process_grouped.nodes[node].get('node_type') == 'root_node' and filter_by_process_root in node]
    
    color_map = {root_node: random_color() for root_node in root_nodes}

    nodes_to_keep = set()
    edges_to_keep = set()
    
    for root_node in root_nodes:
        nodes_to_keep.add(root_node)
        for neighbor in G_process_grouped.neighbors(root_node):
            nodes_to_keep.add(neighbor)
            edges_to_keep.update((root_node, neighbor))
            for dll_neighbor in G_process_grouped.neighbors(neighbor):
                if G_process_grouped.nodes[dll_neighbor].get('node_type') == 'dll_node':
                    nodes_to_keep.add(dll_neighbor)
                    edges_to_keep.add((neighbor, dll_neighbor))

    subgraph = G_process_grouped.subgraph(nodes_to_keep)
    pyvis_net.from_nx(subgraph)

    pyvis_net.force_atlas_2based()
    pyvis_net.set_options("""
    var options = {
        "nodes": {
            "size": 30,
            "font": {
                "size": 20,
                "align": "center"
            }
        },
        "edges": {
            "color": {
                "inherit": false
            },
            "smooth": {
                "enabled": true
            },
            "width": 2
        },
        "physics": {
            "enabled": true,
            "barnesHut": {
                "gravitationalConstant": -20000,
                "centralGravity": 0.3,
                "springLength": 200,
                "springConstant": 0.04
            }
        }
    }
    """)

    for node in pyvis_net.nodes:
        node_id = node['id']
        node_type = G_process_grouped.nodes[node_id].get('node_type')
        if node_type == 'root_node':
            node['color'] = color_map.get(node_id, random_color())
            node['size'] = 50
        elif node_type == 'process_node':
            root_node = next((r for r in root_nodes if r in G_process_grouped.neighbors(node_id)), None)
            node['color'] = generate_node_color(color_map.get(root_node, random_color()))
            node['size'] = 30
        else:  # dll_node
            node['color'] = '#808080'
            node['size'] = 20
        
        node['label'] = node_id
        node['font'] = {'size': 16, 'color': 'white', 'align': 'center'}

    for edge in pyvis_net.edges:
        u, v = edge['from'], edge['to']
        edge['color'] = G_process_grouped[u][v].get('color', '#FFFFFF')

    pyvis_net.write_html(output_path)
    print(f"[+] Created: {output_path}")

def extract_root_nodes_with_multiple_process_nodes(min_count=2):
    """Extract root nodes connected to more than `min_count` process nodes."""
    print(f"[i] Extracting root nodes with more than {min_count} process nodes...")
    result = []
    
    for root_node in G_process_grouped.nodes:
        if G_process_grouped.nodes[root_node].get('node_type') == 'root_node':
            connected_process_nodes = [n for n in G_process_grouped.neighbors(root_node)
                                       if G_process_grouped.nodes[n].get('node_type') == 'process_node']
            if len(connected_process_nodes) > min_count:
                result.append(root_node)
    
    #print(f"Root nodes with more than {min_count} process nodes: {result}")
    return result

def run_git_commands():
    """Run git add, git commit, and git push commands in sequence."""
    try:
        # Run git add .
        print("[i] Running 'git add .\\graphs\\'...")
        subprocess.run(["git", "add", ".\\graphs\\"], check=True)
        
        # Run git commit -m "default"
        print("[i] Running 'git commit -m \"System Scan Commit\"'...")
        subprocess.run(["git", "commit", "-m", "default"], check=True)
        
        # Run git push
        print("[i] Running 'git push'...")
        subprocess.run(["git", "push"], check=True)
        
        print("[i] Git commands executed successfully.")
    
    except subprocess.CalledProcessError as e:
        print(f"[#] An error occurred: {e}")

def run_python_script(script_path):
    """Run the specified Python script."""
    try:
        # Ensure the script path is absolute
        script_path = os.path.abspath(script_path)
        print(f"[i] Running {target_script_path}...")
        
        # Run the Python script
        result = subprocess.run(["python", script_path], capture_output=True, text=True, check=True)
        
        # Print output and errors (if any)
        #print("Output:\n", result.stdout)
        
        print(f"[+] Successfully executed {target_script_path}")
    
    except subprocess.CalledProcessError as e:
        print(f"[#] An error occurred while running {script_path}: {e}")

if __name__ == "__main__":
    dataset_path = os.path.join("..", "list_MODULES_imports.txt")
    target_script_path = "updating_dataset.py"  # Replace with the path to your target script

    while True:
        os.system("cls")
        run_python_script(target_script_path)
        print(f'[i] {timer_for_update} seconds timer begin')
        time.sleep(timer_for_update) #Seconds
        print(f'[+] begin html generation')
        filter_by_process_root = ''
        reading_dataset(dataset_path)
        initializing_graph()
        generated_for_this_root_nodes = extract_root_nodes_with_multiple_process_nodes(min_count=2)

        for root_name in generated_for_this_root_nodes:
            output_path = os.path.join("graphs", f"filtered_{root_name.replace('.exe', '').lower()}_process_network_graph.html")
            generate_pyvis_html(output_path, root_name.replace('.exe', ''))
        run_git_commands()
        
