import subprocess
import os
import sys

def export_handle_output(handle_exe_path, process_name):
    # Construct the command to be executed
    command = f'"{handle_exe_path}" -a -p {process_name}'
    output_file=f"..\\handles_data\\handles_to_{process_name.lower()}.txt"
    
    # Execute the command and capture the output
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    
    # Check if there are any errors
    if process.returncode != 0:
        print(f"Error: {stderr.decode()}")
        return
    
    # Filter the output to include only process handles
    filtered_output = []
    for line in stdout.decode().split('\n'):
        if 'Process' in line:
            filtered_output.append(line)
        elif f'{process_name}.exe pid:' in line:
            filtered_output.append(line)
    
    # Write the filtered output to the output file
    with open(output_file, 'w') as f:
        f.write(''.join(filtered_output))
    
    print(f"Filtered output successfully written to {output_file}")

if __name__ == "__main__":
    if len(sys.argv) < 1:
        print("Usage: python extract_handles_data.py <process_name>")
        sys.exit(1)
    
    # Get the current directory of the Python script
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Construct the path to handle.exe
    handle_exe_path = os.path.join(script_dir, '..', '..', 'dll_hooks', 'get_handles', 'Handle', 'handle.exe')
    
    process_name = sys.argv[1]
    
    export_handle_output(handle_exe_path, process_name)
