import os
import networkx as nx
import copy
from pyvis.network import Network

def generate_edges(list_of_programs_calls, base_file, directory, extension_pattern, type_connection):
    edges = list_of_programs_calls

    # Ensure base_file is an absolute path
    base_file_path = os.path.abspath(base_file)

    for file_name in os.listdir(directory):
        if file_name.endswith(extension_pattern):
            target_file_path = os.path.join(directory, file_name)
            edges.append((base_file_path, target_file_path, type_connection))

    return edges

def ignore_patterns_creator(path):
    # Define ignore patterns directly
    ignore_patterns = [
        '.git', 
        '.vscode', 
        '__pycache__',
        'lib',  
        '.gitignore'
    ]
    return ignore_patterns

def create_graph_from_directory(path, ignore_patterns):
    net = Network(directed=True)

    folder_color = '#8c8c8c'    # Dark gray for folders
    root_color = folder_color   # Same color as folders
    folder_size = 30            # Larger size for folders nodes

    file_colors = {
        '.txt': '#ff9999',    # Light red for text files
        '.exe': '#ff4500',    # Orange red for executable files
        '.cpp': '#ff6347',    # Tomato for C++ files
        '.py': '#00bfff',     # Deep sky blue for Python files
        '.o': '#32cd32',      # Lime green for object files
        '.h': '#4682b4',      # Steel blue for header files
        '.js': '#f0e68c',     # Khaki for JavaScript files
        '.css': '#b0e57c',    # Pale green for CSS files
        '.html': '#ffebcd',   # Blanched almond for HTML files
        '.csv': '#ffeb3b',    # Yellow for CSV files
        '.zip': '#ff69b4',    # Hot pink for ZIP files
        '.png': '#00ff00',    # Lime for PNG files
        '.jpg': '#ff1493',    # Deep pink for JPG files
        '.jpeg': '#ff6347',   # Tomato for JPEG files
        '.md': '#d3d3d3',     # Light gray for Markdown files
        '.json': '#f08080',   # Light coral for JSON files
        '.pdf': '#a52a2a',    # Brown for PDF files
        '.md5': '#6495ed',    # Cornflower blue for MD5 files
        # Add more extensions and colors here
    }

    net.add_node(path, label=os.path.basename(path), title=path, size=folder_size + 10, color=root_color)

    def is_ignored(path):
        base_name = os.path.basename(path)
        if base_name in ignore_patterns:
            print(f'is_ignored: {base_name}')
            return True
        return False

    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if not is_ignored(os.path.join(root, d))]

        for name in dirs:
            dir_path = os.path.join(root, name)
            if not is_ignored(dir_path):
                net.add_node(dir_path, label=name, title=dir_path, color=folder_color, size=folder_size)
                net.add_edge(root, dir_path)

        for name in files:
            file_path = os.path.join(root, name)
            file_extension = os.path.splitext(name)[1].lower()  # Get the file extension
            color = file_colors.get(file_extension, '#DD0000')  # Default color if not specified
            net.add_node(file_path, label=name, title=file_path, color=color)
            net.add_edge(root, file_path)

    return net

def insert_edges_from_paths(net, list_of_programs_calls):
    def get_base_name(path):
        return os.path.basename(path)

    node_ids = {node['id'] for node in net.nodes}

    for source_path, target_path, type_connection in list_of_programs_calls: 
        source_base_name = get_base_name(source_path)
        target_base_name = get_base_name(target_path)
        
        #matching_source_nodes = [node['id'] for node in net.nodes if get_base_name(node['id']) == source_base_name]
        #matching_target_nodes = [node['id'] for node in net.nodes if get_base_name(node['id']) == target_base_name]

        matching_source_nodes = [node['id'] for node in net.nodes if node['id']  == source_path]
        matching_target_nodes = [node['id'] for node in net.nodes if node['id']  == target_path]

        #print('\n', source_path, '\n', target_path)
        #if source_path == r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\graphs\network_so_behavior\network_analysis\update_streamlit.py":
            #print('\n\n\n')
            #for node in net.nodes:
            #    print(node)
            #print('\n', source_path, '\n', target_path)

        if matching_source_nodes and matching_target_nodes:
            for source_node in matching_source_nodes:
                for target_node in matching_target_nodes:
                    net.add_edge(source_node, target_node, color=type_connection)
        else:
            print(f"Warning: One or both nodes '{source_base_name}' and '{target_base_name}' do not exist.")
            #print("Available node IDs:", node_ids)
            wait = input('Press anything to continue')

def create_subgraph_without_folders(net):
    subgraph = Network(directed=True)
    folder_nodes = {node['id'] for node in net.nodes if not os.path.isfile(node['id'])}

    for node in net.nodes:
        node_id = node['id']
        if node_id not in folder_nodes:
            subgraph.add_node(node_id, label=node['label'], title=node['title'], color=node['color'])

    for edge in net.edges:
        if edge['from'] not in folder_nodes and edge['to'] not in folder_nodes:
            subgraph.add_edge(edge['from'], edge['to'])

    subgraph.force_atlas_2based()
    subgraph.set_options("""
    var options = {
        "physics": {
            "enabled": true,
            "forceAtlas2Based": {
                "avoidOverlap": 0,
                "centralGravity": 0.01,
                "damping": 0.4,
                "gravitationalConstant": -50,
                "springConstant": 0.08,
                "springLength": 100
            },
            "solver": "forceAtlas2Based",
            "stabilization": {
                "enabled": true,
                "fit": true,
                "iterations": 1000,
                "onlyDynamicEdges": false,
                "updateInterval": 50
            }
        }
    }
    """)

    return subgraph

call    = '#FF0000' #RED
create  = '#0000FF' #BLUE
access  = '#00FF00' #GREEN
list_of_programs_calls = [
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\update_streamlit.py",
      r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\updating_dataset.py",
      call),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\updating_dataset.py", 
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.exe",
     call),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\updating_dataset.py", 
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_handles_data.py",
     call),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\updating_dataset.py", 
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\list_MODULES_imports.txt",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_handles_data.py", 
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\get_handles\Handle\handle.exe",
     call),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\get_handles\Handle\handle.exe", 
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_handles_data.py",
     call),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\dynamic_graph.py", 
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\list_MODULES_imports.txt",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\interpretation.ipynb", 
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\edgelist.txt",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\compile_it_all2.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.cpp",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\compile_it_all2.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.o",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\compile_it_all2.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.o",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\compile_it_all2.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.exe",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.cpp",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\functions_header.h",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.cpp",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\imports.h",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.exe",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\list_PIDs.txt",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_data.exe",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\list_MODULES_imports.txt",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\main.cpp",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\imports.h",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\main.cpp",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\functions_header.h",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\dllhook.cpp",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\imports.h",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\dllhook.cpp",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\functions_header.h",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\menu_functions.cpp",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\imports.h",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\menu_functions.cpp",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\functions_header.h",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\functions_header.h",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\menu_functions.cpp",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\functions_header.h",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\dllhook.cpp",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\functions_header.h",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\main.cpp",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\dllhook.cpp",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\dllhook.o",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\dllhook.o",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\main.cpp",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\main.o",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\main.o",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\menu_functions.cpp",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\menu_functions.o",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\menu_functions.o",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\compile_it_all1.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\main.exe",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\calls_counter.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\dataset.txt",
     access),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\presentation\folders_relation.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\presentation\directory_structure_no_folders.html",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\presentation\folders_relation.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\presentation\directory_structure.html",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\get_handles\Handle\handle.exe",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\get_handles\output.txt",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\get_handles\Handle\handle.exe",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\dll_hooks\get_handles\output.csv",
     create),
    (r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\update_streamlit.py",
     r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\list_MODULES_imports.txt",
     access)

]

directory = r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\graphs"
# update_streamlit.py create all html with certain pattern in \graphs
file_path = r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\update_streamlit.py"
list_of_programs_calls = generate_edges(list_of_programs_calls, file_path, directory, "_process_network_graph.html", create)
# export_streamlit.py access all html with certain pattern in \graphs
file_path = r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\export_streamlit.py"
list_of_programs_calls = generate_edges(list_of_programs_calls, file_path, directory, "_process_network_graph.html", access)

directory = r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\handles_data"
# handle.exe create all .txt in \handle_data (in reality not but)
file_path = r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\extracting_data\extract_handles_data.py"
list_of_programs_calls = generate_edges(list_of_programs_calls, file_path, directory, ".txt", create)
# update_streamlit.py access all the .txt in \handle_data
file_path = r"C:\Users\dadn\OneDrive\Desktop\Coding\Data_Security\projetos\vulnerability_monitor\network_so_behavior\network_analysis\update_streamlit.py"
list_of_programs_calls = generate_edges(list_of_programs_calls, file_path, directory, ".txt", access)



directory_path = "C:\\Users\\dadn\\OneDrive\\Desktop\\Coding\\Data_Security\\projetos\\vulnerability_monitor"

ignore_patterns = ignore_patterns_creator(directory_path)

net = create_graph_from_directory(directory_path, ignore_patterns)

# Generate the graph with directory structure
net.write_html("directory_structure.html")

# Generate the graph with only the calls
subgraph = create_subgraph_without_folders(net)
insert_edges_from_paths(subgraph, list_of_programs_calls)
subgraph.write_html("directory_structure_no_folders.html")


