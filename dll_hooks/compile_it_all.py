import os
import subprocess

def compile_cpp_files():
    current_dir = os.getcwd()  # Get current working directory
    
    # List all .cpp files in the current directory
    cpp_files = [f for f in os.listdir(current_dir) if f.endswith('.cpp')]
    
    # Compile each .cpp file to .o
    object_files = []
    for cpp_file in cpp_files:
        cpp_path = os.path.join(current_dir, cpp_file)
        object_file = os.path.splitext(cpp_file)[0] + '.o'
        object_path = os.path.join(current_dir, object_file)
        
        # Compile .cpp to .o
        compile_command = f'g++ -c "{cpp_path}" -o "{object_path}"'
        print(f"Compiling {cpp_file}...")
        result = subprocess.run(compile_command, shell=True, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"Failed to compile {cpp_file}:")
            print(result.stderr)
            return
        
        object_files.append(object_path)
    
    # Compile all .o files into a single executable
    if object_files:
        executable_name = 'main.exe'
        object_list = ' '.join(f'"{obj}"' for obj in object_files)
        compile_all_command = (f'g++ {object_list} -o "{os.path.join(current_dir, executable_name)}" '
                               '-luser32 -lkernel32')
        
        print("Compiling all .o files into executable...")
        result = subprocess.run(compile_all_command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"Executable '{executable_name}' successfully created in {current_dir}!")
        else:
            print(f"Failed to create executable '{executable_name}':")
            print(result.stderr)

# Call the function to compile .cpp files in the current directory
compile_cpp_files()
